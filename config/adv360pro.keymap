#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/german.dtsi"

#define DEF 0
#define NUM 1
#define FN  2
#define SYS 3

#define XXX &none
#define ___ &trans

#define KEYS_L    0 1 2 3 4 5 6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  66 67 68 69 70

#define KEYS_R     7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   60 61 62 63 64 65 \
                   77 78 79 80 81

#define THUMBS      35 36 54 71 72 73 \
                    37 38 57 74 75 76

/* Global settings */
#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;
    
&mt { MT_CORE };

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

// Press dot, space and sticky shift at the same time with one keypress
ZMK_MACRO(dot_spc,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

ZMK_HOLD_TAP(mt_dot, bindings = <&dot_spc>, <&kp>; MT_CORE)

#define NAV_LEFT    &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT   &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP      &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN    &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document

#define BSPC_MORPH  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define DEL_MORPH   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

#define DOT_MORPH   &mt_dot 0    DOT     // tap: dot   | long-tap: press dot, space and shift at the same time

ZMK_CONDITIONAL_LAYER(sys, FN NUM, SYS)  // FN + NUM --> SYS

/* Keymap Default Layer */
ZMK_LAYER(default,
&kp EQUAL  &kp N1          &kp N2          &kp N3       &kp N4            &kp N5  &tog 1                                                           &mo 3      &kp N6  &kp N7             &kp N8       &kp N9           &kp N0              &kp MINUS
&kp TAB    &kp Q           &kp W           &kp E        &kp R             &kp T   XXX                                                            XXX      &kp Y   &kp U              &kp I        &kp O            &kp P               &kp BSLH
&kp ESC    &hml LGUI A     &hml LALT S     &hml LCTRL D &hml LSHFT F      &kp G   XXX     XXX   XXX   XXX  XXX  XXX      &kp H   &hmr RSHFT J       &hmr LCTRL K &hmr LALT L      &hmr LGUI SEMI           &kp SQT
XXX  &kp Z           &kp X           &kp C        &kp V             &kp B                        XXX          XXX                            &kp N   &kp M              &kp COMMA    DOT_MORPH          &kp FSLH            XXX
&mo 2      &kp GRAVE       XXX        NAV_LEFT     NAV_RIGHT         BSPC_MORPH  DEL_MORPH    XXX           XXX      &kp ENTER  &kp SPACE          NAV_UP             NAV_DOWN     &kp LBKT         &kp RBKT            &mo 2
)

/* Keymap Number Layer */
ZMK_LAYER(num,
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  ___                                                   &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   XXX                                                    XXX      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   XXX     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  XXX      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
)

/* Keymap Function Layer */
ZMK_LAYER(fn,
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
___  ___  ___  ___  ___  ___  XXX                                       XXX   ___  ___  ___  ___   ___   ___
___  ___  ___  ___  ___  ___  XXX   ___  ___      ___  ___  XXX   ___  ___  ___  ___   ___   ___
___  ___  ___  ___  ___  ___                  ___      ___                  ___  ___  ___  ___   ___   ___
___  ___  ___  ___  ___          ___  ___  ___      ___  ___  ___          ___  ___  ___   ___   ___
)

/* Keymap System Layer */
ZMK_LAYER(sys,
XXX  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  XXX                                                  ___                  XXX  XXX       XXX       XXX  XXX  XXX
XXX  XXX         XXX         XXX         XXX         XXX         &bootloader                                            &bootloader             XXX  XXX       XXX       XXX  XXX  XXX
XXX  XXX         XXX         XXX         XXX         XXX         XXX        XXX  XXX      &bt BT_CLR  XXX       &rgb_ug RGB_MEFS_CMD 5  XXX  XXX       XXX       XXX  XXX  XXX
XXX  XXX         XXX         XXX         XXX         XXX                             XXX      XXX                                           XXX  XXX       XXX       XXX  XXX  XXX
XXX  XXX         XXX         XXX         XXX                       XXX        XXX  XXX      XXX       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  XXX  XXX  XXX
)